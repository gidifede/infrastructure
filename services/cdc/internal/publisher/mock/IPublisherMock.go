// Code generated by MockGen. DO NOT EDIT.
// Source: internal/publisher/IPublisher.go

// Package mock_publisher is a generated GoMock package.
package mock_publisher

import (
	context "context"
	reflect "reflect"
	"github.com/aws/aws-sdk-go/service/sns/snsiface"
	v2 "github.com/cloudevents/sdk-go/v2"
	gomock "github.com/golang/mock/gomock"
)

// Define a mock struct to be used in your unit tests of myFunc.
type MockSNSClient struct {
    snsiface.SNSAPI
}


// MockPublisher is a mock of Publisher interface.
type MockPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockPublisherMockRecorder
}

// MockPublisherMockRecorder is the mock recorder for MockPublisher.
type MockPublisherMockRecorder struct {
	mock *MockPublisher
}

// NewMockPublisher creates a new mock instance.
func NewMockPublisher(ctrl *gomock.Controller) *MockPublisher {
	mock := &MockPublisher{ctrl: ctrl}
	mock.recorder = &MockPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublisher) EXPECT() *MockPublisherMockRecorder {
	return m.recorder
}

// PublishEvent mocks base method.
func (m *MockPublisher) PublishEvent(ctx context.Context, msg *v2.Event, topicARN string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishEvent", ctx, msg, topicARN)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishEvent indicates an expected call of PublishEvent.
func (mr *MockPublisherMockRecorder) PublishEvent(ctx, msg, topicARN interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishEvent", reflect.TypeOf((*MockPublisher)(nil).PublishEvent), ctx, msg, topicARN)
}
