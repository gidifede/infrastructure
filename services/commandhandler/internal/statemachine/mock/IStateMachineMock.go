// Code generated by MockGen. DO NOT EDIT.
// Source: ./IStateMachine.go

// Package mock is a generated GoMock package.
package mock

import (

	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIStateMachine is a mock of IStateMachine interface.
type MockIStateMachine struct {
	ctrl     *gomock.Controller
	recorder *MockIStateMachineMockRecorder
}

// MockIStateMachineMockRecorder is the mock recorder for MockIStateMachine.
type MockIStateMachineMockRecorder struct {
	mock *MockIStateMachine
}

// NewMockIStateMachine creates a new mock instance.
func NewMockIStateMachine(ctrl *gomock.Controller) *MockIStateMachine {
	mock := &MockIStateMachine{ctrl: ctrl}
	mock.recorder = &MockIStateMachineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStateMachine) EXPECT() *MockIStateMachineMockRecorder {

	return m.recorder
}

// CommandToEvent mocks base method.
func (m *MockIStateMachine) CommandToEvent(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommandToEvent", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommandToEvent indicates an expected call of CommandToEvent.
func (mr *MockIStateMachineMockRecorder) CommandToEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandToEvent", reflect.TypeOf((*MockIStateMachine)(nil).CommandToEvent), arg0)
}

// EventsToState mocks base method.
func (m *MockIStateMachine) EventsToState(arg0 []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventsToState", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EventsToState indicates an expected call of EventsToState.
func (mr *MockIStateMachineMockRecorder) EventsToState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventsToState", reflect.TypeOf((*MockIStateMachine)(nil).EventsToState), arg0)
}

// GetActions mocks base method.
func (m *MockIStateMachine) GetActions() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActions")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetActions indicates an expected call of GetActions.
func (mr *MockIStateMachineMockRecorder) GetActions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActions", reflect.TypeOf((*MockIStateMachine)(nil).GetActions))
}

// GetEvents mocks base method.
func (m *MockIStateMachine) GetEvents() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvents")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetEvents indicates an expected call of GetEvents.
func (mr *MockIStateMachineMockRecorder) GetEvents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvents", reflect.TypeOf((*MockIStateMachine)(nil).GetEvents))
}

// GetStates mocks base method.
func (m *MockIStateMachine) GetStates() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStates")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetStates indicates an expected call of GetStates.
func (mr *MockIStateMachineMockRecorder) GetStates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStates", reflect.TypeOf((*MockIStateMachine)(nil).GetStates))
}

// GetTransitionMatrix mocks base method.
func (m *MockIStateMachine) GetTransitionMatrix() [][]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransitionMatrix")
	ret0, _ := ret[0].([][]string)
	return ret0
}

// GetTransitionMatrix indicates an expected call of GetTransitionMatrix.
func (mr *MockIStateMachineMockRecorder) GetTransitionMatrix() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransitionMatrix", reflect.TypeOf((*MockIStateMachine)(nil).GetTransitionMatrix))
}

// NextState mocks base method.
func (m *MockIStateMachine) NextState(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextState", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NextState indicates an expected call of NextState.
func (mr *MockIStateMachineMockRecorder) NextState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextState", reflect.TypeOf((*MockIStateMachine)(nil).NextState), arg0, arg1)
}

// Validate mocks base method.
func (m *MockIStateMachine) Validate() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validate indicates an expected call of Validate.
func (mr *MockIStateMachineMockRecorder) Validate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockIStateMachine)(nil).Validate))
}
