// Code generated by MockGen. DO NOT EDIT.
// Source: ./IEventStore.go

// Package eventStore is a generated GoMock package.
package eventstore

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIEventStore is a mock of IEventStore interface.
type MockIEventStore struct {
	ctrl     *gomock.Controller
	recorder *MockIEventStoreMockRecorder
}

// MockIEventStoreMockRecorder is the mock recorder for MockIEventStore.
type MockIEventStoreMockRecorder struct {
	mock *MockIEventStore
}

// NewMockIEventStore creates a new mock instance.
func NewMockIEventStore(ctrl *gomock.Controller) *MockIEventStore {
	mock := &MockIEventStore{ctrl: ctrl}
	mock.recorder = &MockIEventStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEventStore) EXPECT() *MockIEventStoreMockRecorder {
	return m.recorder
}

// Append mocks base method.
func (m *MockIEventStore) Append(arg0 context.Context, arg1 Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Append", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Append indicates an expected call of Append.
func (mr *MockIEventStoreMockRecorder) Append(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockIEventStore)(nil).Append), arg0, arg1)
}

// Get mocks base method.
func (m *MockIEventStore) Get(arg0 context.Context, arg1 string) ([]Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].([]Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIEventStoreMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIEventStore)(nil).Get), arg0, arg1)
}
