// Code generated by MockGen. DO NOT EDIT.
// Source: ./ITimestampManager.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockITimestampManager is a mock of ITimestampManager interface.
type MockITimestampManager struct {
	ctrl     *gomock.Controller
	recorder *MockITimestampManagerMockRecorder
}

// MockITimestampManagerMockRecorder is the mock recorder for MockITimestampManager.
type MockITimestampManagerMockRecorder struct {
	mock *MockITimestampManager
}

// NewMockITimestampManager creates a new mock instance.
func NewMockITimestampManager(ctrl *gomock.Controller) *MockITimestampManager {
	mock := &MockITimestampManager{ctrl: ctrl}
	mock.recorder = &MockITimestampManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITimestampManager) EXPECT() *MockITimestampManagerMockRecorder {
	return m.recorder
}

// GenerateTimestamp mocks base method.
func (m *MockITimestampManager) GenerateTimestamp() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTimestamp")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GenerateTimestamp indicates an expected call of GenerateTimestamp.
func (mr *MockITimestampManagerMockRecorder) GenerateTimestamp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTimestamp", reflect.TypeOf((*MockITimestampManager)(nil).GenerateTimestamp))
}

// StringToTimestamp mocks base method.
func (m *MockITimestampManager) StringToTimestamp(arg0 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StringToTimestamp", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StringToTimestamp indicates an expected call of StringToTimestamp.
func (mr *MockITimestampManagerMockRecorder) StringToTimestamp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StringToTimestamp", reflect.TypeOf((*MockITimestampManager)(nil).StringToTimestamp), arg0)
}

// TimestampToString mocks base method.
func (m *MockITimestampManager) TimestampToString(arg0 int64) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TimestampToString", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// TimestampToString indicates an expected call of TimestampToString.
func (mr *MockITimestampManagerMockRecorder) TimestampToString(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TimestampToString", reflect.TypeOf((*MockITimestampManager)(nil).TimestampToString), arg0)
}
